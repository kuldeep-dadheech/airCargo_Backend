// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.3
// source: app/v1/main.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CountriesServiceClient is the client API for CountriesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CountriesServiceClient interface {
	List(ctx context.Context, in *ListCountriesRequest, opts ...grpc.CallOption) (*CountriesResponse, error)
	Fetch(ctx context.Context, in *FetchCountryRequest, opts ...grpc.CallOption) (*CountryResponse, error)
	Create(ctx context.Context, in *CreateCountryRequest, opts ...grpc.CallOption) (*CountryResponse, error)
	Update(ctx context.Context, in *UpdateCountryRequest, opts ...grpc.CallOption) (*CountryResponse, error)
	Delete(ctx context.Context, in *DeleteCountryRequest, opts ...grpc.CallOption) (*CountryResponse, error)
	Activate(ctx context.Context, in *ActiviateCountryRequest, opts ...grpc.CallOption) (*CountryResponse, error)
	Deactivate(ctx context.Context, in *DeactiviateCountryRequest, opts ...grpc.CallOption) (*CountryResponse, error)
}

type countriesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCountriesServiceClient(cc grpc.ClientConnInterface) CountriesServiceClient {
	return &countriesServiceClient{cc}
}

func (c *countriesServiceClient) List(ctx context.Context, in *ListCountriesRequest, opts ...grpc.CallOption) (*CountriesResponse, error) {
	out := new(CountriesResponse)
	err := c.cc.Invoke(ctx, "/app.v1.CountriesService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countriesServiceClient) Fetch(ctx context.Context, in *FetchCountryRequest, opts ...grpc.CallOption) (*CountryResponse, error) {
	out := new(CountryResponse)
	err := c.cc.Invoke(ctx, "/app.v1.CountriesService/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countriesServiceClient) Create(ctx context.Context, in *CreateCountryRequest, opts ...grpc.CallOption) (*CountryResponse, error) {
	out := new(CountryResponse)
	err := c.cc.Invoke(ctx, "/app.v1.CountriesService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countriesServiceClient) Update(ctx context.Context, in *UpdateCountryRequest, opts ...grpc.CallOption) (*CountryResponse, error) {
	out := new(CountryResponse)
	err := c.cc.Invoke(ctx, "/app.v1.CountriesService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countriesServiceClient) Delete(ctx context.Context, in *DeleteCountryRequest, opts ...grpc.CallOption) (*CountryResponse, error) {
	out := new(CountryResponse)
	err := c.cc.Invoke(ctx, "/app.v1.CountriesService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countriesServiceClient) Activate(ctx context.Context, in *ActiviateCountryRequest, opts ...grpc.CallOption) (*CountryResponse, error) {
	out := new(CountryResponse)
	err := c.cc.Invoke(ctx, "/app.v1.CountriesService/Activate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countriesServiceClient) Deactivate(ctx context.Context, in *DeactiviateCountryRequest, opts ...grpc.CallOption) (*CountryResponse, error) {
	out := new(CountryResponse)
	err := c.cc.Invoke(ctx, "/app.v1.CountriesService/Deactivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CountriesServiceServer is the server API for CountriesService service.
// All implementations must embed UnimplementedCountriesServiceServer
// for forward compatibility
type CountriesServiceServer interface {
	List(context.Context, *ListCountriesRequest) (*CountriesResponse, error)
	Fetch(context.Context, *FetchCountryRequest) (*CountryResponse, error)
	Create(context.Context, *CreateCountryRequest) (*CountryResponse, error)
	Update(context.Context, *UpdateCountryRequest) (*CountryResponse, error)
	Delete(context.Context, *DeleteCountryRequest) (*CountryResponse, error)
	Activate(context.Context, *ActiviateCountryRequest) (*CountryResponse, error)
	Deactivate(context.Context, *DeactiviateCountryRequest) (*CountryResponse, error)
	mustEmbedUnimplementedCountriesServiceServer()
}

// UnimplementedCountriesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCountriesServiceServer struct {
}

func (UnimplementedCountriesServiceServer) List(context.Context, *ListCountriesRequest) (*CountriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCountriesServiceServer) Fetch(context.Context, *FetchCountryRequest) (*CountryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedCountriesServiceServer) Create(context.Context, *CreateCountryRequest) (*CountryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCountriesServiceServer) Update(context.Context, *UpdateCountryRequest) (*CountryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCountriesServiceServer) Delete(context.Context, *DeleteCountryRequest) (*CountryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCountriesServiceServer) Activate(context.Context, *ActiviateCountryRequest) (*CountryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Activate not implemented")
}
func (UnimplementedCountriesServiceServer) Deactivate(context.Context, *DeactiviateCountryRequest) (*CountryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deactivate not implemented")
}
func (UnimplementedCountriesServiceServer) mustEmbedUnimplementedCountriesServiceServer() {}

// UnsafeCountriesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CountriesServiceServer will
// result in compilation errors.
type UnsafeCountriesServiceServer interface {
	mustEmbedUnimplementedCountriesServiceServer()
}

func RegisterCountriesServiceServer(s grpc.ServiceRegistrar, srv CountriesServiceServer) {
	s.RegisterService(&CountriesService_ServiceDesc, srv)
}

func _CountriesService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCountriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountriesServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.v1.CountriesService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountriesServiceServer).List(ctx, req.(*ListCountriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CountriesService_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountriesServiceServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.v1.CountriesService/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountriesServiceServer).Fetch(ctx, req.(*FetchCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CountriesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountriesServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.v1.CountriesService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountriesServiceServer).Create(ctx, req.(*CreateCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CountriesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountriesServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.v1.CountriesService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountriesServiceServer).Update(ctx, req.(*UpdateCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CountriesService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountriesServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.v1.CountriesService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountriesServiceServer).Delete(ctx, req.(*DeleteCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CountriesService_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActiviateCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountriesServiceServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.v1.CountriesService/Activate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountriesServiceServer).Activate(ctx, req.(*ActiviateCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CountriesService_Deactivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactiviateCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountriesServiceServer).Deactivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.v1.CountriesService/Deactivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountriesServiceServer).Deactivate(ctx, req.(*DeactiviateCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CountriesService_ServiceDesc is the grpc.ServiceDesc for CountriesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CountriesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.v1.CountriesService",
	HandlerType: (*CountriesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _CountriesService_List_Handler,
		},
		{
			MethodName: "Fetch",
			Handler:    _CountriesService_Fetch_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _CountriesService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CountriesService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CountriesService_Delete_Handler,
		},
		{
			MethodName: "Activate",
			Handler:    _CountriesService_Activate_Handler,
		},
		{
			MethodName: "Deactivate",
			Handler:    _CountriesService_Deactivate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/v1/main.proto",
}

// CurrenciesServiceClient is the client API for CurrenciesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CurrenciesServiceClient interface {
	List(ctx context.Context, in *ListCurrenciesRequest, opts ...grpc.CallOption) (*CurrenciesResponse, error)
	Fetch(ctx context.Context, in *FetchCurrencyRequest, opts ...grpc.CallOption) (*CurrencyResponse, error)
	Create(ctx context.Context, in *CreateCurrencyRequest, opts ...grpc.CallOption) (*CurrencyResponse, error)
	Update(ctx context.Context, in *UpdateCurrencyRequest, opts ...grpc.CallOption) (*CurrencyResponse, error)
	Delete(ctx context.Context, in *DeleteCurrencyRequest, opts ...grpc.CallOption) (*CurrencyResponse, error)
	Activate(ctx context.Context, in *ActiviateCurrencyRequest, opts ...grpc.CallOption) (*CurrencyResponse, error)
	Deactivate(ctx context.Context, in *DeactiviateCurrencyRequest, opts ...grpc.CallOption) (*CurrencyResponse, error)
}

type currenciesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCurrenciesServiceClient(cc grpc.ClientConnInterface) CurrenciesServiceClient {
	return &currenciesServiceClient{cc}
}

func (c *currenciesServiceClient) List(ctx context.Context, in *ListCurrenciesRequest, opts ...grpc.CallOption) (*CurrenciesResponse, error) {
	out := new(CurrenciesResponse)
	err := c.cc.Invoke(ctx, "/app.v1.CurrenciesService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currenciesServiceClient) Fetch(ctx context.Context, in *FetchCurrencyRequest, opts ...grpc.CallOption) (*CurrencyResponse, error) {
	out := new(CurrencyResponse)
	err := c.cc.Invoke(ctx, "/app.v1.CurrenciesService/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currenciesServiceClient) Create(ctx context.Context, in *CreateCurrencyRequest, opts ...grpc.CallOption) (*CurrencyResponse, error) {
	out := new(CurrencyResponse)
	err := c.cc.Invoke(ctx, "/app.v1.CurrenciesService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currenciesServiceClient) Update(ctx context.Context, in *UpdateCurrencyRequest, opts ...grpc.CallOption) (*CurrencyResponse, error) {
	out := new(CurrencyResponse)
	err := c.cc.Invoke(ctx, "/app.v1.CurrenciesService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currenciesServiceClient) Delete(ctx context.Context, in *DeleteCurrencyRequest, opts ...grpc.CallOption) (*CurrencyResponse, error) {
	out := new(CurrencyResponse)
	err := c.cc.Invoke(ctx, "/app.v1.CurrenciesService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currenciesServiceClient) Activate(ctx context.Context, in *ActiviateCurrencyRequest, opts ...grpc.CallOption) (*CurrencyResponse, error) {
	out := new(CurrencyResponse)
	err := c.cc.Invoke(ctx, "/app.v1.CurrenciesService/Activate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currenciesServiceClient) Deactivate(ctx context.Context, in *DeactiviateCurrencyRequest, opts ...grpc.CallOption) (*CurrencyResponse, error) {
	out := new(CurrencyResponse)
	err := c.cc.Invoke(ctx, "/app.v1.CurrenciesService/Deactivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurrenciesServiceServer is the server API for CurrenciesService service.
// All implementations must embed UnimplementedCurrenciesServiceServer
// for forward compatibility
type CurrenciesServiceServer interface {
	List(context.Context, *ListCurrenciesRequest) (*CurrenciesResponse, error)
	Fetch(context.Context, *FetchCurrencyRequest) (*CurrencyResponse, error)
	Create(context.Context, *CreateCurrencyRequest) (*CurrencyResponse, error)
	Update(context.Context, *UpdateCurrencyRequest) (*CurrencyResponse, error)
	Delete(context.Context, *DeleteCurrencyRequest) (*CurrencyResponse, error)
	Activate(context.Context, *ActiviateCurrencyRequest) (*CurrencyResponse, error)
	Deactivate(context.Context, *DeactiviateCurrencyRequest) (*CurrencyResponse, error)
	mustEmbedUnimplementedCurrenciesServiceServer()
}

// UnimplementedCurrenciesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCurrenciesServiceServer struct {
}

func (UnimplementedCurrenciesServiceServer) List(context.Context, *ListCurrenciesRequest) (*CurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCurrenciesServiceServer) Fetch(context.Context, *FetchCurrencyRequest) (*CurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedCurrenciesServiceServer) Create(context.Context, *CreateCurrencyRequest) (*CurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCurrenciesServiceServer) Update(context.Context, *UpdateCurrencyRequest) (*CurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCurrenciesServiceServer) Delete(context.Context, *DeleteCurrencyRequest) (*CurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCurrenciesServiceServer) Activate(context.Context, *ActiviateCurrencyRequest) (*CurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Activate not implemented")
}
func (UnimplementedCurrenciesServiceServer) Deactivate(context.Context, *DeactiviateCurrencyRequest) (*CurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deactivate not implemented")
}
func (UnimplementedCurrenciesServiceServer) mustEmbedUnimplementedCurrenciesServiceServer() {}

// UnsafeCurrenciesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CurrenciesServiceServer will
// result in compilation errors.
type UnsafeCurrenciesServiceServer interface {
	mustEmbedUnimplementedCurrenciesServiceServer()
}

func RegisterCurrenciesServiceServer(s grpc.ServiceRegistrar, srv CurrenciesServiceServer) {
	s.RegisterService(&CurrenciesService_ServiceDesc, srv)
}

func _CurrenciesService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCurrenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrenciesServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.v1.CurrenciesService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrenciesServiceServer).List(ctx, req.(*ListCurrenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrenciesService_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrenciesServiceServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.v1.CurrenciesService/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrenciesServiceServer).Fetch(ctx, req.(*FetchCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrenciesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrenciesServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.v1.CurrenciesService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrenciesServiceServer).Create(ctx, req.(*CreateCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrenciesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrenciesServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.v1.CurrenciesService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrenciesServiceServer).Update(ctx, req.(*UpdateCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrenciesService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrenciesServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.v1.CurrenciesService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrenciesServiceServer).Delete(ctx, req.(*DeleteCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrenciesService_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActiviateCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrenciesServiceServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.v1.CurrenciesService/Activate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrenciesServiceServer).Activate(ctx, req.(*ActiviateCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrenciesService_Deactivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactiviateCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrenciesServiceServer).Deactivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.v1.CurrenciesService/Deactivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrenciesServiceServer).Deactivate(ctx, req.(*DeactiviateCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CurrenciesService_ServiceDesc is the grpc.ServiceDesc for CurrenciesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CurrenciesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.v1.CurrenciesService",
	HandlerType: (*CurrenciesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _CurrenciesService_List_Handler,
		},
		{
			MethodName: "Fetch",
			Handler:    _CurrenciesService_Fetch_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _CurrenciesService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CurrenciesService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CurrenciesService_Delete_Handler,
		},
		{
			MethodName: "Activate",
			Handler:    _CurrenciesService_Activate_Handler,
		},
		{
			MethodName: "Deactivate",
			Handler:    _CurrenciesService_Deactivate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/v1/main.proto",
}
